
spring:
  application:
    name: order-provider
  redis:
    jedis:
      pool:
        max-active: 100
        max-wait: 2000
        max-idle: 500
        min-idle: 0
    cluster:
      nodes: 192.168.10.12:6379,192.168.10.12:6380,192.168.10.12:6381,192.168.10.14:6379,192.168.10.14:6380,192.168.10.14:6381,192.168.10.15:6379,192.168.10.15:6380,192.168.10.15:6381
      max-redirects: 5000
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    datasource:
      names: master0,master1,slave1,slave2,slave3,slave4
      master0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.10.12:3306/12306-user-0?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      slave1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.10.15:3306/12306-user-0?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      slave2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.10.14:3306/12306-user-0?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      master1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.10.12:3306/12306-user-1?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      slave3:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.10.15:3306/12306-user-1?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      slave4:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.10.14:3306/12306-user-1?useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
    sharding:
      #      default-database-strategy:
      #        standard:
      #          sharding-column: username
      #          precise-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
      #          range-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
      tables:
        t_user:
          actual-data-nodes: master$->{0..1}.t_user_$->{0..31}
          database-strategy:
            standard:
              shardingColumn: username
              precise-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
          table-strategy:
            standard:
              sharding-column: username
              precise-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
        t_passenger:
          actual-data-nodes: master$->{0..1}.t_passenger_$->{0..31}
          table-strategy:
            standard:
              shardingColumn: username
              precise-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
          database-strategy:
            standard:
              shardingColumn: username
              precise-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
        t_user_mail:
          actual-data-nodes: master$->{0..1}.t_user_mail_$->{0..31}
          database-strategy:
            standard:
              shardingColumn: mail
              precise-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
          table-strategy:
            standard:
              shardingColumn: mail
              precise-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
        t_user_phone:
          actual-data-nodes: master$->{0..1}.t_user_phone_$->{0..31}
          database-Strategy:
            standard:
              shardingColumn: phone
              precise-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.DataBaseConsistentShardingAlgorithm
          table-strategy:
            standard:
              shardingColumn: phone
              precise-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
              range-algorithm-class-name: me.xgwd.dao.sharding.ConsistentShardingAlgorithm
      default-data-source-name: master0
      master-slave-rules:
        master0:
          name: master0
          master-data-source-name: master0
          slave-data-source-names:
            - slave1
            - slave2
        master1:
          name: dataSource1
          master-data-source-name: master1
          slave-data-source-names:
            - slave3
            - slave4

    masterslave:
      load-balance-algorithm-type: round_robin
    props:
      sql:
        show: true
  profiles:
    active: dev
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.10.12:8848
        username: nacos
        password: nacos

dubbo:
  application:
    name: order-provider
  registry:
    address: nacos://192.168.10.12:8848,nacos://192.168.10.14:8848,nacos://192.168.10.15:8848
    username: nacos
    password: nacos
  scan:
    base-packages: me.xgwd.order.service.impl
  protocol:
    name: dubbo
  consumer:
    filter: dubboRpcFilter,  -exception
  provider:
    filter: dubboRpcFilter, -exception

mybatis-plus:
  global-config:
    db-config:
      logic-delete-field: delFlag
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

cache:
  redis:
    value-timeout: 50000
    bloom-filter:
      enabled: true
      user-register:
        name: user_register_cache_penetration_bloom_filter${unique-name:}
# 布隆过滤器
framework:
  fastjson:
    safa-mode: true
  cache:
    redis:
      value-timeout: 50000
      bloom-filter:
        enabled: true
        user-register:
          name: user_register_cache_penetration_bloom_filter${unique-name:}


server:
  port: 1526

management:
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    tags:
      application: ${spring.application.name}

  health:
    db:
      enabled: false